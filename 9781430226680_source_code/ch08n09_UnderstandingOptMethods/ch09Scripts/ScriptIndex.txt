10053OptimizerTrace.sql       - A test case to reproduce most the aspects mentioned in the “Generating 10053 Cost-Based Optimizer Traces” section of the chapter. Creates the partitioned table T_OPT_10053_TRACE1 and the unpartitioned table T_OPT_10053_TRACE2. 
10053QueryTransformation.sql  - Creates the sample tables T7 and T8 and then demonstrates capturing a 10053 trace file for two simple SQL statements which will likely be transformed by the cost-based optimizer.
AdaptiveCursorBindTest.sql    - Demonstrates generation of additional child cursors due to adaptive cursor sharing in Oracle 11g. Uses the tables created by the scripts in the section "Sample trace file analysis with Oracle 11.1.0.7".
BCHRSampleTable.sql           - Creates the sample table T1 and index with 100,000,000 rows. Used in the section "Monitoring and Reacting to the BCHR".
BCHRTestQueries.sql           - Script used to test the performance of forced index access through the adjustment of the OPTIMIZER_INDEX_COST_ADJ to a low value when accessing an infrequently used table having a high clustering factor value for the primary key index. The script helps demonstrate why a higher BCHR does not always translate into better performance. Used in the section "Monitoring and Reacting to the BCHR".
BufferCacheBlocks.sql         - Lists the number of blocks in the buffer cache for the table T9, and the number and mode of the blocks.
BufferCacheCRCopyGen.sql      - Script which when executed simultaneously by 100 sessions causes a large number of consistent read copies of the segment header block and various other blocks.
BufferCacheTable.sql          - Creates the sample table T9 used by the scripts BufferCacheCRCopyGen.sql and BufferCacheBlocks.sql.
CPULoad.sh                    - Unix/Linux Bash script which places a load on the server's CPUs to simulate CPU consumption from another database instance or background process running on the server. Used in the section "CPU Load Generator for Non-Oracle Database Related Processes (Unix/Linux)".
CPULoad.sql                   - Anonymous PL/SQL block which places a load on the server's CPUs to simulate CPU consumption within the database instance. Used in the section "CPU Load Generator within the Database Instance".
CPULoad.vbs                   - VBS script which places a load on the server's CPUs to simulate CPU consumption from another database instance or background process running on the server. Used in the section "CPU Load Generator for Non-Oracle Database Related Processes (Windows)".
CPURunQueue.vbs               - VBS script which uses Windows Management Instrumentation (WMI) to retrieve the number of processes and threads, and processor queue length, as well as the delta value of the content switches for the previous second. For each Oracle instance running on the server, displays the instance name, user mode time, kernel mode time, and memory consumption. Capable of querying local and remote servers. Used in the section "Determining the CPU Run Queue".
ExamineOptimizerParam.sql     - Script which retrieves the optimizer parameters considered when CHILD_NUMBER 3 for SQL_ID f6rs5tka838kp was created. Also demonstrates using event 10132 to write a trace file containing the optimizer parameters, peeked bind variables, and execution plan during every hard parse.
ExecutionPlansCreateTable.sql - Creates the sample tables T3 and T4 and the index IND_T4 with 10,000 rows each. Used in the section "Examining Execution Plans and Plan Statistics".
ExecutionPlansQueries.sql     - Script used to demonstrate retrieving execution plans for the last SQL statement with DBMS_XPLAN using TYPICAL and ALLSTATS LAST. Used in the section "Examining Execution Plans and Plan Statistics".
Extend10046Adaptive.sql       - Investigates the adaptive cursor sharing views V$SQL_CS_STATISTICS and V$SQL_CS_SELECTIVITY for a SQL statement. Used by the section "Sample trace file analysis with Oracle 11.1.0.7".
Extend10046LogonTrigger.sql   - Script creates a logon trigger to enable a 10046 extended trace when a session connects to the database using an application with MYAPP as the first 5 characters of the application's EXE name.
Extend10046Queries.sql        - Queries used to generate output in the 10046 trace file. Used by the section "Sample trace file analysis with Oracle 11.1.0.7".
Extend10046Table.sql          - Creates the sample tables T3 and T4 and the index IND_T4 with 10,000 rows each. Used by the section "Sample trace file analysis with Oracle 11.1.0.7".
HighChildCountPlans.sql       - For cursors with more than 10 child cursors, retrieves the execution plans for the child cursors using DBMS_XPLAN and the reason for the generation of the child cursor. Used in the section "Examining Execution Plans and Plan Statistics".
HintList11.1.0.7.txt          - List of SQL hints available on Oracle 11.1.0.7.
HintList11.2.0.1.txt          - List of SQL hints available on Oracle 11.2.0.1.
InvestigateEnqueueQueries.sql - Queries used to investigate the enqueue waits. Used in the section "Investigating Enqueue Waits".
InvestigateEnqueueSesAct.sql  - Data manipulation language (DML) activity for the 3 sessions involved in the enqueue waits. Used in the section "Investigating Enqueue Waits".
InvestigateEnqueueTable.sql   - Creates the sample tables T5 and T6 without a foreign key index on table T6. Used in the section "Investigating Enqueue Waits".
LowOverheadDataCollect.sql    - Script used to collect and report the delta values of various statistics and wait events to permit a quick analysis of system performance. Used in the section "Sampling Performance with Low Overhead".
LowOverheadInsPercBusy.sql    - Script calculates the percentage of used CPU at the operating system level which was consumed by the database instance. Used in the section "Sampling Performance with Low Overhead".
LowOverheadPercentBusy.sql    - Script calculates the percentage of available CPU time at the operating system level which was used in the sampling period. Used in the section "Sampling Performance with Low Overhead".
LowOverheadProcessList.bat    - Windows 2008 Server/Windows Vista/Windows 7 script which outputs the computer's process list to a text file. Used in the section "Sampling Performance with Low Overhead".
LowOverheadTable.sql          - Creates the temporary tables used in the section "Sampling Performance with Low Overhead".
MonitoringFileActivity.sql    - SQL statements used in the section "Monitoring File Activity".
MonitoringSQLDataCollect.sql  - Script used to collect and report the delta values SQL statements in the library cache where the elapsed time for the SQL statement exceeds 10 seconds. Used in the section "Monitoring the Delta Values for SQL Statements".
MonitoringSQLInvestigate.sql  - Script further investigates the 4 SQL statements found to consume at least 10 seconds of elapsed time. Used in the section "Monitoring the Delta Values for SQL Statements".
MonitoringSQLTable.sql        - Creates the temporary tables used in the section "Monitoring the Delta Values for SQL Statements".
MonitoringWaits.sql           - SQL statements used in the section "Monitoring the Delta Values of System/Session Waits".
MonitoringWaitsExtColl.sql    - SQL statements create a sample logging table for time based wait event analysis, insert into the table, and select the delta values from the table.  Ideally, the capture would occur when an event, such as a blocking lock, is detected as well as capturing on a scheduled time interval.
OradebugPGAMemoryFill.sql     - Script allocates a large portion of memory to the PGA by performing a bulk collect of the rows from the sample table T1. Executing the script using several sessions may cause the memory limit specified by the PGA_AGGREGATE_TARGET to be exceeded which may force other SQL statements executing in the instance to switch from optimal (in-memory) executions to one-pass or multi-pass executions (demonstrating another cause for a query to execute quickly at times and slowly at other times).
OradebugProcessList.sql       - Lists the PID, SPID, USERNAME, and PROGRAM needed to attach to a session's process using SQL*Plus' ORADEBUG.
SampleInvestigationUpg.sql    - The four page long SQL statement from the “Problem after Upgrading Oracle Version” sample investigation.
Sleep.vbs                     - VBS script which may be called from a SQL*Plus script to pause the execution of a script for a specified number of seconds without using DBMS_LOCK. Used in the section "Creating Statspack or AWR Reports".
StatspackPlans.sql            - SQL statements which output the execution plans for Statspack snaps captured at level 6 or greater, uses DBMS_XPLAN. Used in the section "Creating Statspack or AWR Reports".
StatspackSnap.sql             - Captures a starting Statspack snapshot, waits 10 minutes using the OS command sleep, and then captures a second Statspack snapshot.
