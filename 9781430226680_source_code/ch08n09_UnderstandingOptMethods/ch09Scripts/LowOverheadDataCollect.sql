COMMIT;

DEFINE CAPTURE_SECONDS=600

INSERT INTO
  DATALOG.TS_SYSTEM_EVENT
SELECT
  EVENT,
  TOTAL_WAITS,
  TOTAL_TIMEOUTS,
  TIME_WAITED,
  TIME_WAITED_MICRO
FROM
  V$SYSTEM_EVENT;

INSERT INTO
  DATALOG.TS_OSSTAT
SELECT
  STAT_NAME,
  VALUE
FROM
  V$OSSTAT;

INSERT INTO
  DATALOG.TS_SYS_TIME_MODEL
SELECT
  STAT_NAME,
  VALUE
FROM
  V$SYS_TIME_MODEL;

INSERT INTO
  DATALOG.TS_SYSSTAT
SELECT	
  NAME,
  VALUE
FROM
  V$SYSSTAT;

EXEC DBMS_LOCK.SLEEP(&&CAPTURE_SECONDS);

INSERT INTO
  DATALOG.TE_SYSTEM_EVENT
SELECT
  EVENT,
  TOTAL_WAITS,
  TOTAL_TIMEOUTS,
  TIME_WAITED,
  TIME_WAITED_MICRO
FROM
  V$SYSTEM_EVENT;

INSERT INTO
  DATALOG.TE_OSSTAT
SELECT
  STAT_NAME,
  VALUE
FROM
  V$OSSTAT;

INSERT INTO
  DATALOG.TE_SYS_TIME_MODEL
SELECT
  STAT_NAME,
  VALUE
FROM
  V$SYS_TIME_MODEL;

INSERT INTO
  DATALOG.TE_SYSSTAT
SELECT
  NAME,
  VALUE
FROM
  V$SYSSTAT;


SPOOL quickcheck.txt

SET PAGESIZE 200
COL WAIT_CLASS FORMAT A15 TRU
COL DELTA FORMAT 9999999990
COL DELTA_SEC FORMAT 99999990.00
COL WAIT_PERCENT FORMAT 990.00

/* Ranked wait time by wait class, including CPU used – note that the ‘CPU used by this session’ statistic is not posted until in-process queries complete */
SELECT
  WAIT_CLASS,
  DELTA,
  DELTA_SEC,
  ROUND(RATIO_TO_REPORT(DELTA) OVER () * 100,2) WAIT_PERCENT
FROM
  (SELECT
    EN.WAIT_CLASS,
    SUM(TE.TIME_WAITED-NVL(TS.TIME_WAITED,0)) DELTA,
    SUM(ROUND((TE.TIME_WAITED-NVL(TS.TIME_WAITED,0))/ &&CAPTURE_SECONDS,2)) DELTA_SEC
  FROM
    DATALOG.TE_SYSTEM_EVENT TE,
    DATALOG.TS_SYSTEM_EVENT TS,
    V$EVENT_NAME EN
  WHERE
    TE.EVENT=TS.EVENT(+)
    AND TE.TIME_WAITED-NVL(TS.TIME_WAITED,0)>0
    AND TE.EVENT=EN.NAME
    AND EN.WAIT_CLASS<>'Idle'
  GROUP BY
    EN.WAIT_CLASS
  UNION ALL
  SELECT
    'CPU' WAIT_CLASS,
    ROUND(SUM((TE.VALUE-NVL(TS.VALUE,0))/10000),0) DELTA,
    ROUND(SUM((TE.VALUE-NVL(TS.VALUE,0))/10000)/ &&CAPTURE_SECONDS,2) DELTA_SEC
  FROM
    DATALOG.TE_SYS_TIME_MODEL TE,
    DATALOG.TS_SYS_TIME_MODEL TS
  WHERE
    TE.STAT_NAME IN ('DB CPU', 'background cpu time')
    AND TE.STAT_NAME=TS.STAT_NAME(+) )
ORDER BY
  WAIT_CLASS;

COL EVENT FORMAT A30 TRU

/* Wait time by wait event name */
SELECT
  TE.EVENT,
  TE.TOTAL_WAITS-NVL(TS.TOTAL_WAITS,0) WAITS,
  TE.TOTAL_TIMEOUTS-NVL(TS.TOTAL_TIMEOUTS,0) T_OUTS,
  TE.TIME_WAITED-NVL(TS.TIME_WAITED,0) DELTA,
  ROUND((TE.TIME_WAITED-NVL(TS.TIME_WAITED,0))/ &&CAPTURE_SECONDS,2) DELTA_SEC
FROM
  DATALOG.TE_SYSTEM_EVENT TE,
  DATALOG.TS_SYSTEM_EVENT TS
WHERE
  TE.EVENT=TS.EVENT(+)
  AND TE.TIME_WAITED-NVL(TS.TIME_WAITED,0)>0
ORDER BY
  TE.EVENT;

COL STAT_NAME FORMAT A25 TRU

/* Operating system statistics */
SELECT
  TE.STAT_NAME,
  TE.VALUE END_VALUE,
  TE.VALUE-NVL(TS.VALUE,0) DELTA,
  ROUND((TE.VALUE-NVL(TS.VALUE,0))/ &&CAPTURE_SECONDS,2) DELTA_SEC
FROM
  DATALOG.TE_OSSTAT TE,
  DATALOG.TS_OSSTAT TS
WHERE
  TE.STAT_NAME=TS.STAT_NAME(+)
ORDER BY
  TE.STAT_NAME;

COL STAT_NAME FORMAT A50 TRU

/* CPU time and elapsed time for Oracle activities */
SELECT
  TE.STAT_NAME,
  TE.VALUE-NVL(TS.VALUE,0) DELTA,
  ROUND((TE.VALUE-NVL(TS.VALUE,0))/ &&CAPTURE_SECONDS,2) DELTA_SEC
FROM
  DATALOG.TE_SYS_TIME_MODEL TE,
  DATALOG.TS_SYS_TIME_MODEL TS
WHERE
  TE.STAT_NAME=TS.STAT_NAME(+)
ORDER BY
  TE.STAT_NAME;

COL NAME FORMAT A50 TRU

/* System level statistics */
SELECT
  TE.NAME,
  TE.VALUE-NVL(TS.VALUE,0) DELTA,
  ROUND((TE.VALUE-NVL(TS.VALUE,0))/ &&CAPTURE_SECONDS,2) DELTA_SEC
FROM
  DATALOG.TE_SYSSTAT TE,
  DATALOG.TS_SYSSTAT TS
WHERE
  TE.NAME=TS.NAME(+)
  AND TE.VALUE-NVL(TS.VALUE,0)<>0
ORDER BY
  TE.NAME;

SPOOL OFF
